var documenterSearchIndex = {"docs":
[{"location":"#Cards.jl-Documentation","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"CurrentModule = Cards","category":"page"},{"location":"#Overview","page":"Cards.jl Documentation","title":"Overview","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"This module describes the enums/structs/functions to play a simple version of Poker.","category":"page"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Enums:","category":"page"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Suit – The 4 suits of the cards.\nRank – The 13 different ranks.\nPokerType – The different poker hands one may have.","category":"page"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Structs:","category":"page"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Card – A description of a given card as a combination of Suit and Rank.\nPokerHand – A data structure describing a poker hand including its classification;              i.e., its PokerType.\nDeck – A description of a deck of cards.","category":"page"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Functions:","category":"page"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Deck Functions:\nDeck() – Create a deck of cards. \nshuffle_deck! – Shuffle the deck of cards.\nrestore_deck! – Return all \"dealt\" cards back to the place in the deck where                    they were drawn.\nnum_cards_left_in_deck – The number of cards left in the deck.\nCard Play\ndraw_cards! – Draw some number of cards from a deck.\ndeal_hand!   – Deal a poker hand to a player.\nmake_secondary_draw! – Execute a second draw of a simple poker game.\nplay_poker! – Simulate a simple version of a poker game with two players.","category":"page"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"There is an associated Jupyter notebook at src/CardTest.ipynb.","category":"page"},{"location":"#Enums","page":"Cards.jl Documentation","title":"Enums","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Suit","category":"page"},{"location":"#Cards.Suit","page":"Cards.jl Documentation","title":"Cards.Suit","text":"Suit (Enum)\n\nAllowable suits in poker; ordered by strength from lowest to highest.\n\nFields\n\n♠\n♦  \n♣  \n♥ \n\n\n\n\n\n","category":"type"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Rank","category":"page"},{"location":"#Cards.Rank","page":"Cards.jl Documentation","title":"Cards.Rank","text":"Rank (Enum)\n\nCard ranks in poker; ordered by strength from lowest to highest.\n\nFields\n\nTwo Three Four Five Six Seven Eight Nine Ten\nJack\nQueen\nKing\nAce\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"PokerType","category":"page"},{"location":"#Cards.PokerType","page":"Cards.jl Documentation","title":"Cards.PokerType","text":"PokerType (Enum)\n\nEnumeration describing a classification of hands for poker; ordered by strength from lowest to highest.\n\nFields\n\nHighCard\nOnePair\nTwoPair\nThreeOfAKind\nStraight\nFlush\nFullHouse\nFourOfAKind\nStraightFlush\n\n\n\n\n\n","category":"type"},{"location":"#Structs","page":"Cards.jl Documentation","title":"Structs","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Card","category":"page"},{"location":"#Cards.Card","page":"Cards.jl Documentation","title":"Cards.Card","text":"Card\n\nDATA STRUCTURE: Representation of a Card.\n\nFields\n\nsuit :: Suit\nrank :: Rank\n\nConstructors\n\nCard(::Suit, ::Rank)\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"PokerHand","category":"page"},{"location":"#Cards.PokerHand","page":"Cards.jl Documentation","title":"Cards.PokerHand","text":"PokerHand\n\nDATA STRUCTURE: Representation of a Card.\n\nThis inner constructor takes a vector of cards:\n\nChecks the input contract:\nChecks that the number of cards is correct;\nChecks that there are no duplicates.\nSorts the cards (isless is defined for Card).\nCreates an internal representation grouping cards by Rank.\nClassifies the hand into one of the poker types: PokerType. These are the familiar names of poker hands: TwoPair, FullHouse, etc.\n\nFields\n\ncards  :: Vector{Card}\ngr_rep :: Vector{Tuple{Int, Rank}}\nclass  :: PokerType\n\nConstructor\n\nPokerHand(::Vector{Card}; N::Int=5)\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Deck","category":"page"},{"location":"#Cards.Deck","page":"Cards.jl Documentation","title":"Cards.Deck","text":"Deck\n\nMUTABLE DATA STRUCTURE: Representation of a deck of cards.\n\nFields\n\nplace :: Int          – The place in the deck beyond which we may draw.\ncds   :: Vector{Card} – A vector of cards.\n\nConstructors\n\nDeck() – Creates the standard 52 card deck using the standard Card ordering.\nDeck(place::Int, cards::Vector{Card}) – Create a deck of cards manually.\n\n\n\n\n\n","category":"type"},{"location":"#Functions","page":"Cards.jl Documentation","title":"Functions","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"shuffle_deck!","category":"page"},{"location":"#Cards.shuffle_deck!","page":"Cards.jl Documentation","title":"Cards.shuffle_deck!","text":"shuffle_deck!(d)\n\nShuffles the Deck, d, destructively; that is, the deck is changed as  a result of this function.\n\nThis function only shuffles \"what's left\" of the deck. It will not interfere with the function restore_deck!, in the sense that all of the cards will put back, but the \"restore\" does not interfere with current and previous shuffle_deck!.\n\nArguments\n\nd :: Deck – The deck to shuffle.\n\nReturn\n\nnothing\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"restore_deck!","category":"page"},{"location":"#Cards.restore_deck!","page":"Cards.jl Documentation","title":"Cards.restore_deck!","text":"restore_deck!(d)\n\nReset the Deck, d, to have all of the cards placed back into the deck.\n\nAssumptions\n\nThe deck d has not been directly manipulated; that is, only the functions in this module should be used to manipulate a Deck.\n\nNote\n\nThe cards that have been previous delt will be replaced; however,\n\nprevious calls to shuffle_deck! will remain in effect.\n\nArguments\n\nd :: Deck – The Deck to operate on.\n\nReturn\n\n::Nothing\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"num_cards_left_in_deck","category":"page"},{"location":"#Cards.num_cards_left_in_deck","page":"Cards.jl Documentation","title":"Cards.num_cards_left_in_deck","text":"num_cards_left_in_deck(d)\n\nComputes the number of cards left in deck, d.\n\nArguments\n\nd :: Deck – The deck to query.\n\nReturn\n\nThe number of cards left in the deck.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"deal_hand!","category":"page"},{"location":"#Cards.deal_hand!","page":"Cards.jl Documentation","title":"Cards.deal_hand!","text":"deal_hand!(d; N=5)\n\nDeals a hand from a deck, d, creating a PokerHand.\n\nIn the process, removes N cards from the deck, d.\n\nArguments\n\nd :: Deck – A Deck from which to deal.\n\nKeyword Arguments\n\nN=5 :: Int – The number of cards to deal.\n\nReturn\n\n::PokerHand – A poker hand\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"draw_cards!","category":"page"},{"location":"#Cards.draw_cards!","page":"Cards.jl Documentation","title":"Cards.draw_cards!","text":"draw_cards!(d, N)\n\nDraws N cards from a deck, d. In the process, removes N cards from the deck, d.\n\nArguments\n\nd :: Deck  – A Deck from which to draw.\nN :: Int – The number of cards to draw.\n\nReturn\n\n::Vector{Card} – A vector of Cards.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"make_secondary_draw!","category":"page"},{"location":"#Cards.make_secondary_draw!","page":"Cards.jl Documentation","title":"Cards.make_secondary_draw!","text":"make_secondary_draw!(h, d)\n\nThis function examines a poker hand, h, and decides (given that we can draw up to two cards from the deck) what cards (if any) to eliminate and then draw from the deck, d.\n\nAlthough one may stick with the current hand, and consequently,  not draw from the deck, we mark this function as mutable as  it has the potential to mutate the deck, d. \n\nArguments\n\nh :: PokerHand – The current poker hand to examine.\nd :: Deck      – The deck to work with.\n\nReturn\n\n::PokerHand – A new poker hand. Potentially a copy of the original hand.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"play_poker!","category":"page"},{"location":"#Cards.play_poker!","page":"Cards.jl Documentation","title":"Cards.play_poker!","text":"play_poker!(d)\n\nPlay a game of poker with two players.\n\nProcess:\n\nDeal each player two 5 card hands.\nCompare two hands to see who would win.\nEach player can then ask for up to 2 cards.\nThe two players are compared again to see who wins.\n\nNote: This function mutates the deck by dealing cards            to the players.\n\nArguments\n\nd :: Deck – A deck of cards.\n\nReturn\n\n::Nothing\n\n\n\n\n\n","category":"function"},{"location":"#Lower-Level-Functions","page":"Cards.jl Documentation","title":"Lower Level Functions","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"The Base function isless has been overloaded for the Structs: Card, and PokerHand.","category":"page"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"This means that a vector of Card is sorted first by Suit and then Rank.\nThis means that a vector of PokerHand is sorted by the strength of the  hand as measured by the game Poker.","category":"page"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"The Base function (==) has been overloaded for struct PokerHand.","category":"page"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"classify_hand","category":"page"},{"location":"#Cards.classify_hand","page":"Cards.jl Documentation","title":"Cards.classify_hand","text":"classify_hand(gr_rep)\n\nClassifies a poker hand into one of the standard classes given by the enumeration: PokerType.\n\nThis is done by first examining the length of the grouped rank representation, gr_rep.\n\nWe know the following:\n\n|gr_rep| == 2 implies FourOfKind  | FullHouse\n|gr_rep| == 3 implies ThreeOfKind | TwoPair\n|gr_rep| == 4 implies OnePair\n|gr_rep| == 5 implies HighCard     | Flush  | Straight | StraightFlush \n\nArguments\n\ngr_rep :: Vector{Tuple{Int, Rank}}  – The internal representation of the hand. (See grouped_rank_rep).\ncds    :: Vector{Card}                – Cards sorted by rank then suit.\n\nReturns\n\n::PokerType\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"grouped_rank_rep","category":"page"},{"location":"#Cards.grouped_rank_rep","page":"Cards.jl Documentation","title":"Cards.grouped_rank_rep","text":"grouped_rank_rep(cds)\n\nCreates a representation of a Poker hand.\n\nThe representation is a vector of two-tuples of the form: (N, Card-Rank) – Here, N is the number of times a card with Card-Rank appears in the hand. The tuple representation is ordered from highest to lowest.\n\nNOTE: When N==1 the corresponding rank uniquely determines the card in the hand.\n\nInput Contract\n\nCards are ASSUMED sorted via Base.isless(Card, Card).\n\nArguments\n\ncds :: Vector{Card} – A Vector of Card.\n\nExamples: The poker hand (♣ King, ♦ Jack, ♥ Nine, ♠ Nine, ♣ Three)\n\nbecomes: [(2, Nine), (1, King), (1, Jack), (1, Three)]\n\nReturn\n\n::Vector{Tuple{Int, Rank}} – A Vector of two-tuples. \n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"poker_hand_contract","category":"page"},{"location":"#Cards.poker_hand_contract","page":"Cards.jl Documentation","title":"Cards.poker_hand_contract","text":"poker_hand_contract(cds; N=5)\n\nChecks that a poker hand is valid.\n\nChecks the following are true for cds:\n\nThey are unique.\nTheir number is N. \n\nArguments\n\ncds :: Vector{Card} – A vector of cards.\n\nOptional Arguments\n\nN=5 :: Int – The number of cards that the hand should have.\n\nReturn\n\n::Bool – true if cds are valid.\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"Cards.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"","category":"page"}]
}
